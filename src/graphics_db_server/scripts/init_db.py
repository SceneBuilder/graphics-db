import argparse

from pgvector.psycopg import register_vector
from psycopg_pool import ConnectionPool

from graphics_db_server.core.config import (
    db_settings,
    EMBEDDING_DIMS,
    INDEX_NAME,
    INDEX_TYPE,
    SIMILARITY_OPS,
    TABLE_NAME,
)
from graphics_db_server.logging import logger

EXTENSION_ENABLE_SQL = """
CREATE EXTENSION IF NOT EXISTS vectorscale CASCADE;
CREATE EXTENSION IF NOT EXISTS vector CASCADE;
"""  # CASCADE auto-installs pgvector

# Objaverse Assets Table
OBJAVERSE_TABLE_CREATION_SQL = f"""
CREATE TABLE IF NOT EXISTS objaverse_assets (
    iid BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    uid TEXT UNIQUE NOT NULL,
    viewer_url TEXT,
    license TEXT,
    tags TEXT[],
    
    -- Objaverse-specific categorization
    asset_category TEXT,
    geometric_complexity TEXT,
    has_textures BOOLEAN DEFAULT FALSE,
    file_format TEXT DEFAULT 'glb',
    
    clip_embedding VECTOR({EMBEDDING_DIMS}),
    sbert_embedding VECTOR({EMBEDDING_DIMS}),
    
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
)
"""

# Poly Haven Assets Table
POLYHAVEN_TABLE_CREATION_SQL = f"""
CREATE TABLE IF NOT EXISTS polyhaven_assets (
    iid BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    uid TEXT UNIQUE NOT NULL,
    polyhaven_url TEXT,
    
    -- Poly Haven-specific categorization
    asset_category TEXT,
    asset_subcategory TEXT,
    surface_type TEXT,
    material_properties TEXT[],
    resolution_available TEXT[],
    
    tags TEXT[],
    categories TEXT[],
    asset_type TEXT DEFAULT 'texture',
    
    clip_embedding VECTOR({EMBEDDING_DIMS}),
    sbert_embedding VECTOR({EMBEDDING_DIMS}),
    
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
)
"""

# Legacy table (keep for migration)
ASSET_TABLE_CREATION_SQL = f"""
CREATE TABLE IF NOT EXISTS {TABLE_NAME} (
    -- internal key for performance
    iid BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    -- external key for security
    uid TEXT,
    
    url TEXT,
    tags TEXT[],
    source TEXT,
    license TEXT,
    asset_type TEXT,
    clip_embedding VECTOR({EMBEDDING_DIMS}),
    sbert_embedding VECTOR({EMBEDDING_DIMS})
)
"""

# Objaverse indexes
OBJAVERSE_CLIP_INDEX_SQL = f"""
CREATE INDEX IF NOT EXISTS objaverse_clip_idx
ON objaverse_assets
USING {INDEX_TYPE} (clip_embedding {SIMILARITY_OPS})
"""

OBJAVERSE_SBERT_INDEX_SQL = f"""
CREATE INDEX IF NOT EXISTS objaverse_sbert_idx
ON objaverse_assets
USING {INDEX_TYPE} (sbert_embedding {SIMILARITY_OPS})
"""

# Category indexes for fast filtering
OBJAVERSE_CATEGORY_INDEX_SQL = """
CREATE INDEX IF NOT EXISTS objaverse_category_idx
ON objaverse_assets (asset_category)
"""

# Poly Haven indexes
POLYHAVEN_CLIP_INDEX_SQL = f"""
CREATE INDEX IF NOT EXISTS polyhaven_clip_idx
ON polyhaven_assets
USING {INDEX_TYPE} (clip_embedding {SIMILARITY_OPS})
"""

POLYHAVEN_SBERT_INDEX_SQL = f"""
CREATE INDEX IF NOT EXISTS polyhaven_sbert_idx
ON polyhaven_assets
USING {INDEX_TYPE} (sbert_embedding {SIMILARITY_OPS})
"""

POLYHAVEN_CATEGORY_INDEX_SQL = """
CREATE INDEX IF NOT EXISTS polyhaven_category_idx
ON polyhaven_assets (asset_category)
"""

# Legacy indexes (keep for backward compatibility)
VEC_INDEX_CREATION_SQL_CLIP = f"""
CREATE INDEX IF NOT EXISTS {INDEX_NAME}_clip
ON {TABLE_NAME}
USING {INDEX_TYPE} (clip_embedding {SIMILARITY_OPS})
"""

VEC_INDEX_CREATION_SQL_SBERT = f"""
CREATE INDEX IF NOT EXISTS {INDEX_NAME}_sbert
ON {TABLE_NAME}
USING {INDEX_TYPE} (sbert_embedding {SIMILARITY_OPS});
"""


def setup_databse(force: bool = False):
    """Connects to DB and runs setup commands for separated asset tables."""

    pool = ConnectionPool(conninfo=db_settings.DATABASE_URL)
    with pool.getconn() as conn:
        with conn.cursor() as cur:
            logger.info("Enabling extensions...")
            cur.execute(EXTENSION_ENABLE_SQL)
            logger.info("Extensions are ready.")
            register_vector(conn)

            if force:
                logger.warning("Dropping all tables...")
                cur.execute("DROP TABLE IF EXISTS objaverse_assets CASCADE;")
                cur.execute("DROP TABLE IF EXISTS polyhaven_assets CASCADE;")
                cur.execute(f"DROP TABLE IF EXISTS {TABLE_NAME} CASCADE;")
                logger.info("All tables dropped.")

            logger.info("Creating Objaverse table...")
            cur.execute(OBJAVERSE_TABLE_CREATION_SQL)
            logger.info("Objaverse table is ready.")

            logger.info("Creating Poly Haven table...")
            cur.execute(POLYHAVEN_TABLE_CREATION_SQL)
            logger.info("Poly Haven table is ready.")

            logger.info("Creating legacy assets table (for migration)...")
            cur.execute(ASSET_TABLE_CREATION_SQL)
            logger.info(f"Legacy table {TABLE_NAME} is ready.")

            logger.info("Creating Objaverse indexes...")
            cur.execute(OBJAVERSE_CLIP_INDEX_SQL)
            cur.execute(OBJAVERSE_SBERT_INDEX_SQL)
            cur.execute(OBJAVERSE_CATEGORY_INDEX_SQL)
            logger.info("Objaverse indexes ready.")

            logger.info("Creating Poly Haven indexes...")
            cur.execute(POLYHAVEN_CLIP_INDEX_SQL)
            cur.execute(POLYHAVEN_SBERT_INDEX_SQL)
            cur.execute(POLYHAVEN_CATEGORY_INDEX_SQL)
            logger.info("Poly Haven indexes ready.")

            logger.info("Creating legacy indexes...")
            cur.execute(VEC_INDEX_CREATION_SQL_CLIP)
            cur.execute(VEC_INDEX_CREATION_SQL_SBERT)
            logger.info("Legacy indexes ready.")

        conn.commit()
    pool.close()
    logger.success("Database setup complete with separated tables.")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Initialize the database.")
    parser.add_argument(
        "--force",
        action="store_true",
        help="Force rebuild of the table by dropping it first.",
    )
    args = parser.parse_args()
    setup_databse(force=args.force)

import argparse

from pgvector.psycopg import register_vector
from psycopg_pool import ConnectionPool

from graphics_db_server.core.config import (
    db_settings,
    EMBEDDING_DIMS,
    INDEX_NAME,
    INDEX_TYPE,
    SIMILARITY_OPS,
    TABLE_NAME,
)
from graphics_db_server.logging import logger

EXTENSION_ENABLE_SQL = """
CREATE EXTENSION IF NOT EXISTS vectorscale CASCADE;
CREATE EXTENSION IF NOT EXISTS vector CASCADE;
"""  # CASCADE auto-installs pgvector

ASSET_TABLE_CREATION_SQL = f"""
CREATE TABLE IF NOT EXISTS {TABLE_NAME} (
    -- internal key for performance
    iid BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    -- external key for security
    uid TEXT,
    
    url TEXT,
    tags TEXT[],
    clip_embedding VECTOR({EMBEDDING_DIMS}),
    sbert_embedding VECTOR({EMBEDDING_DIMS})
)
"""

VEC_INDEX_CREATION_SQL_CLIP = f"""
CREATE INDEX IF NOT EXISTS {INDEX_NAME}_clip
ON {TABLE_NAME}
USING {INDEX_TYPE} (clip_embedding {SIMILARITY_OPS})
"""

VEC_INDEX_CREATION_SQL_SBERT = f"""
CREATE INDEX IF NOT EXISTS {INDEX_NAME}_sbert
ON {TABLE_NAME}
USING {INDEX_TYPE} (sbert_embedding {SIMILARITY_OPS});
"""


def setup_databse(force: bool = False):
    """Connects to DB and runs setup commands."""

    pool = ConnectionPool(conninfo=db_settings.DATABASE_URL)
    with pool.getconn() as conn:
        with conn.cursor() as cur:
            logger.info("Enabling extensions...")
            cur.execute(EXTENSION_ENABLE_SQL)
            logger.info("Extensions are ready.")
            register_vector(conn)

            if force:
                logger.warning(f"Dropping table {TABLE_NAME}...")
                cur.execute(f"DROP TABLE IF EXISTS {TABLE_NAME} CASCADE;")
                logger.info(f"Table {TABLE_NAME} dropped.")

            logger.info("Creating table...")
            cur.execute(ASSET_TABLE_CREATION_SQL)
            logger.info(f"Table {TABLE_NAME} is ready.")

            logger.info("Creating index...")
            cur.execute(VEC_INDEX_CREATION_SQL_CLIP)
            cur.execute(VEC_INDEX_CREATION_SQL_SBERT)
            logger.info("Index is ready.")

        conn.commit()
    pool.close()
    logger.success("Database setup complete.")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Initialize the database.")
    parser.add_argument(
        "--force",
        action="store_true",
        help="Force rebuild of the table by dropping it first.",
    )
    args = parser.parse_args()
    setup_databse(force=args.force)
